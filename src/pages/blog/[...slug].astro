---
import { type CollectionEntry, getCollection } from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';

import Comment from '../../components/Comment.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import { render } from 'astro:content';
import type { MarkdownHeading } from 'astro';
import TableOfContents from '../../components/TableOfContents.astro';
import Newsletter from '../../components/Newsletter.astro';

interface Props {
	entry: CollectionEntry<'blog'>;
	headings: MarkdownHeading[];
}

export async function getStaticPaths() {
	const blog = await getCollection('blog');

	const headings = await Promise.all(
		blog.map(async (post) => {
			const data = await render(post);
			return data.headings;
		})
  	);

	return blog.map((entry, index) => ({
		params: { slug: entry.id },
		props: { entry, headings: headings[index] },
	}));
}

const { entry, headings } = Astro.props;
const { Content } = await render(entry);
---

<BaseLayout
  title={entry.data.title}
  description={entry.data.description}
  image={entry.data.image}>
	<div class="stack gap-20">
		<div class="stack">
			<header>
				<div class="wrapper stack gap-2">
					<a class="back-link" href="/blog/"><Icon icon="arrow-left" /> Blog</a>
					<Hero title={entry.data.title} align="start">
						<p class="description">{entry.data.description}</p>
						<div class="details">
							<div class="tags">
								{entry.data.tags.splice(0,5).map((t) => <Pill><a class={'menu-item'} title={t} href={`/tags/${t}/`}>{t}</a></Pill>)}
							</div>
						</div>
					</Hero>
				</div>
			</header>
			<main class="wrapper">
					<div class="content">
						<TableOfContents headings={headings} />
						<Content />
						<Newsletter />
					</div>
			</main>
		</div>
	</div>
</BaseLayout>

<style>
	.back-link {
		display: none;
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem 0;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
	}

	.description {
		font-size: var(--text-lg);
	}

	h2 {
		font-size: var(--text-3xl);
	}

	h3 {
		font-size: var(--text-2xl);
	}

	.content {
		margin-inline: auto;
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin-top: 3.5rem;
	}

	.content :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}

	main img {
		margin-bottom: 20px;
	}
</style>
